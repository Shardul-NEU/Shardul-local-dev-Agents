class Exploiter:
    def __init__(self, graph, pheromone_matrix):
        self.graph = graph
        self.pheromone_matrix = pheromone_matrix

    def refine_solution(self, solution):
        """
        Refine a candidate route using a simple 2-opt algorithm.
        """
        if solution is None:
            return None
        improved = True
        best_solution = solution
        while improved:
            improved, best_solution = self.two_opt(best_solution)
        return best_solution

    def two_opt(self, route):
        best = route
        improved = False
        best_cost = self.route_cost(route)
        n = len(route)
        for i in range(1, n - 2):
            for j in range(i + 1, n - 1):
                new_route = route[:i] + route[i:j+1][::-1] + route[j+1:]
                # Validate connectivity
                valid = all(self.graph.has_edge(new_route[k], new_route[k+1])
                            for k in range(len(new_route)-1))
                if not valid:
                    continue
                new_cost = self.route_cost(new_route)
                if new_cost < best_cost:
                    best = new_route
                    best_cost = new_cost
                    improved = True
        return improved, best

    def route_cost(self, route):
        cost = 0
        for i in range(len(route)-1):
            edge_data = self.graph.get_edge_data(route[i], route[i+1])
            if edge_data is None:
                return float('inf')
            cost += edge_data[0]['length']
        return cost
